import test from "ava";

// Test pdfjs imports and basic functionality
test("pdfjs imports work correctly", async t => {
  // Test that we can import pdfjs-dist without errors
  const pdfjs = await import("pdfjs-dist");
  
  // Verify that the main exports exist
  t.truthy(pdfjs, "pdfjs should be importable");
  t.truthy(pdfjs.getDocument, "getDocument should be available");
  t.truthy(pdfjs.GlobalWorkerOptions, "GlobalWorkerOptions should be available");
  
  // Test that GlobalWorkerOptions can be configured
  t.truthy(pdfjs.GlobalWorkerOptions, "GlobalWorkerOptions should be an object");
  t.is(typeof pdfjs.GlobalWorkerOptions, "object", "GlobalWorkerOptions should be an object");
  
  // Test that getDocument is a function
  t.is(typeof pdfjs.getDocument, "function", "getDocument should be a function");
});

test("pdfjs GlobalWorkerOptions configuration", async t => {
  const pdfjs = await import("pdfjs-dist");
  
  // Test setting worker source (similar to what the app does)
  const originalWorkerSrc = pdfjs.GlobalWorkerOptions.workerSrc;
  
  // Set a test worker src
  pdfjs.GlobalWorkerOptions.workerSrc = "/test/worker.js";
  
  t.is(pdfjs.GlobalWorkerOptions.workerSrc, "/test/worker.js", "Should be able to set workerSrc");
  
  // Restore original value
  pdfjs.GlobalWorkerOptions.workerSrc = originalWorkerSrc;
});

test("pdfjs getDocument basic functionality", async t => {
  const pdfjs = await import("pdfjs-dist");
  
  // Create a minimal PDF buffer (basic PDF structure)
  // This is a minimal valid PDF that should be parseable
  const minimalPDF = new Uint8Array([
    0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, 0x0A, // %PDF-1.4\n
    0x31, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 1 0 obj\n
    0x3C, 0x3C, 0x0A, // <<\n
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x43, 0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x0A, // /Type /Catalog\n
    0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Pages 2 0 R\n
    0x3E, 0x3E, 0x0A, // >>\n
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj\n
    0x32, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 2 0 obj\n
    0x3C, 0x3C, 0x0A, // <<\n
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x0A, // /Type /Pages\n
    0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x31, 0x0A, // /Count 1\n
    0x2F, 0x4B, 0x69, 0x64, 0x73, 0x20, 0x5B, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5D, 0x0A, // /Kids [3 0 R]\n
    0x3E, 0x3E, 0x0A, // >>\n
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj\n
    0x33, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 3 0 obj\n
    0x3C, 0x3C, 0x0A, // <<\n
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x0A, // /Type /Page\n
    0x2F, 0x50, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Parent 2 0 R\n
    0x2F, 0x4D, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6F, 0x78, 0x20, 0x5B, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5D, 0x0A, // /MediaBox [0 0 612 792]\n
    0x3E, 0x3E, 0x0A, // >>\n
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj\n
    0x78, 0x72, 0x65, 0x66, 0x0A, // xref\n
    0x30, 0x20, 0x34, 0x0A, // 0 4\n
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0A, // 0000000000 65535 f \n
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000009 00000 n \n
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x34, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000074 00000 n \n
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x35, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000145 00000 n \n
    0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x0A, // trailer\n
    0x3C, 0x3C, 0x0A, // <<\n
    0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, 0x34, 0x0A, // /Size 4\n
    0x2F, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Root 1 0 R\n
    0x3E, 0x3E, 0x0A, // >>\n
    0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0A, // startxref\n
    0x32, 0x34, 0x32, 0x0A, // 242\n
    0x25, 0x25, 0x45, 0x4F, 0x46 // %%EOF
  ]);
  
  try {
    // Test that getDocument can at least be called without throwing
    const loadingTask = pdfjs.getDocument({ data: minimalPDF });
    
    t.truthy(loadingTask, "getDocument should return a loading task");
    t.truthy(loadingTask.promise, "loading task should have a promise");
    t.is(typeof loadingTask.promise.then, "function", "loading task promise should be thenable");
    
    // Try to load the PDF (might fail due to minimal PDF structure, but should not throw on function call)
    try {
      const pdf = await loadingTask.promise;
      t.truthy(pdf, "PDF should load successfully");
      t.is(typeof pdf.numPages, "number", "PDF should have numPages property");
    } catch (error) {
      // It's okay if the minimal PDF fails to parse completely,
      // we're mainly testing that the imports and basic API work
      t.pass("getDocument API is callable (PDF parsing may fail with minimal test data)");
    }
  } catch (error) {
    t.fail(`getDocument should be callable without errors: ${error.message}`);
  }
});

test("pdfjs version check", async t => {
  const pdfjs = await import("pdfjs-dist");
  
  // Check that we can access version info
  t.truthy(pdfjs.version, "pdfjs should have version information");
  t.is(typeof pdfjs.version, "string", "version should be a string");
  
  // Should be version 3.11.x
  t.true(pdfjs.version.startsWith("3.11"), `Should be version 3.11.x, got ${pdfjs.version}`);
});